#Область СлужебныеПроцедурыИФункции

// Пример функции, вызываемой в фоне.
// 
// Параметры:
//  ЗавершитьСОшибкой - Булево - Завершить с ошибкой
//  ВыводитьПрогрессВыполнения - Булево - Выводить прогресс выполнения
//  КоличествоПотоков -Число- Количество потоков
//  НачалоПериодаДО - Дата -Начало периода ДО
//  КонецПериодаДО - Дата - Конец периода ДО
//  МассивВидовДокументов  - Строка - Массив видов документов
// 
// Возвращаемое значение:
//  Строка - Выполнить длительное однопоточное перепроведение
Функция ВыполнитьДлительноеОднопоточноеПерепроведение(ЗавершитьСОшибкой = Ложь, ВыводитьПрогрессВыполнения = Ложь,КоличествоПотоков, НачалоПериодаДО,КонецПериодаДО,МассивВидовДокументов) Экспорт
	Перем СтроковыеФункцииКлиентСервер;
	ДлительностьРасчетаНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	
	КоличествоДокументов = 0;	
	
	
	ВыборкаДокументов =  ВыборДокументовПоВсемВидам(МассивВидовДокументов,НачалоПериодаДО,КонецПериодаДО);
	
	КоличествоДокументов = ВыборкаДокументов.Количество();	
	
	ДлительностьПодготовкиДокументов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлительностьПодбора = (ДлительностьПодготовкиДокументов - ДлительностьРасчетаНачало)/1000; 	
	ВыполнятьДлительноеДействие(ВыборкаДокументов,КоличествоДокументов, ВыводитьПрогрессВыполнения,ДлительностьПодбора);
	
	Если ЗавершитьСОшибкой Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка: Фоновое задание не выполнено'"));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДлительностьРасчетаКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлительностьПроведения = (ДлительностьРасчетаКонец - ДлительностьРасчетаНачало)/1000;
	ПоместитьВоВременноеХранилище(ДлительностьПроведения);
	
	МассивРезультатовВХранилище = Новый Массив;	
	МассивРезультатовВХранилище.Добавить(ДлительностьПроведения);
	МассивРезультатовВХранилище.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Перепроведение выполнено за %1 сек. %2 обработано документов'"),ДлительностьПроведения,КоличествоДокументов));
	
	
	Возврат МассивРезультатовВХранилище;
	
КонецФункции


 //Пример процедуры, вызываемой в фоне.                               
//@skip-check module-accessibility-at-client
Процедура ВыполнитьДлительноеОднопоточноеПерепроведениеПроцедура(ЗавершитьСОшибкой = Ложь, ВыводитьПрогрессВыполнения = Ложь,
КоличествоПотоков, НачалоПериодаДО,КонецПериодаДО) Экспорт

Перем СтроковыеФункцииКлиентСервер;
	ДлительностьРасчетаНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();

КоличествоДокументов = 0;

//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
Выборка = Документы.РеализацияТоваровУслуг.Выбрать(НачалоПериодаДО, КонецПериодаДО); 
ВыборкаСчетчик = Документы.РеализацияТоваровУслуг.Выбрать(НачалоПериодаДО, КонецПериодаДО); 
Пока ВыборкаСчетчик.Следующий() Цикл  	
	КоличествоДокументов = КоличествоДокументов +1;	
КонецЦикла;	
ДлительностьПодготовкиДокументов = ТекущаяУниверсальнаяДатаВМиллисекундах();
ДлительностьПодбора = (ДлительностьПодготовкиДокументов - ДлительностьРасчетаНачало)/1000; 

ВыполнятьДлительноеДействие(Выборка,КоличествоДокументов,ВыводитьПрогрессВыполнения,ДлительностьПодбора);

Если ЗавершитьСОшибкой Тогда
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Ошибка: действие %1 не выполнено'"), "Фоновая процедура");
	ВызватьИсключение ТекстОшибки;
КонецЕсли;

КонецПроцедуры

Процедура ВыполнятьДлительноеДействие(ВыборкаДокументов, КоличествоДокументов, ВыводитьПрогрессВыполнения, ДлительностьПодбора)
	Перем ОбщегоНазначения;
	Перем ДлительныеОперации;
	Перем СтроковыеФункцииКлиентСервер;
	Счетчик = 1;
	
	ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = ' %1  Длительность подбора документов %2 сек.'"),
	ТекущаяДатаСеанса(),  ДлительностьПодбора));
	
	Для каждого эл ИЗ  ВыборкаДокументов Цикл
		Процент = Цел(Счетчик / КоличествоДокументов * 100);
		Попытка
			ДокОбъект = эл.Ссылка.ПолучитьОбъект();
			//ДокОбъект.Комментарий = ДокОбъект.Комментарий + ".." + "фз";
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение); 		
		Исключение 
			ОбщегоНазначения.СообщитьПользователю("Ошибка Документ " + ДокОбъект.Ссылка + " ошибка обработки");
		КонецПопытки;			
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1.. Операция выполнена на %2 процента'"),ТекущаяДатаСеанса(), Процент));
		
		Если ВыводитьПрогрессВыполнения Тогда
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Фоновое задание перепроводится - документ %1'"), ДокОбъект.Ссылка);
			ДлительныеОперации.СообщитьПрогресс(Процент, Сообщение);
		КонецЕсли;
		Счетчик = Счетчик + 1;	
	КонецЦикла;
	
КонецПроцедуры  

Функция ВыполнитьДлительноеМногопоточноеПерепроведениеПоВидам(Поток,Адрес) Экспорт
	Перем ОбщегоНазначения;
	Перем СтроковыеФункцииКлиентСервер;
	Перем ДлительныеОперации;
	ДлительностьМногопоточногоПроведенияНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ВыводитьПрогрессВыполнения = Поток.ВыводитьПрогрессВыполнения;
	Перепроведено = 0;
	Счетчик = 1;
	НомерПотока = Поток.КодПотока;	
	КоличествоДокументов = Поток.ТЗПотока.Количество();
	
	Для каждого эл ИЗ Поток.ТЗПотока  Цикл
		Процент = Цел(Счетчик / КоличествоДокументов * 100);
		Перепроведено = Перепроведено +1;
		Попытка	
			ДокОбъект = эл.Ссылка.ПолучитьОбъект();  
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		исключение 
			ОбщегоНазначения.СообщитьПользователю("Ошибка Документ " + ДокОбъект.Ссылка + " ошибка обработки " + ОписаниеОшибки()); 
		КонецПопытки;
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2 выполнена на %3 процента'"),
		ТекущаяДатаСеанса(), НомерПотока, Процент));
		
		Если ВыводитьПрогрессВыполнения Тогда
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 документ %2'"), НомерПотока, ДокОбъект.Ссылка );
			ДлительныеОперации.СообщитьПрогресс(Процент, Сообщение);
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла; 	
	ДлительностьПроведенияНаПотоке = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДлительностьМногопоточногоПроведенияНачало)/1000;
	
	//ПоместитьВоВременноеХранилище(ДлительностьПроведенияНаПотоке,Адрес);	
	// результаты длительной операции в данном случае по конкретному потоку помещаем в хранилище
	МассивРезультатовВХранилище = Новый Массив;	
	МассивРезультатовВХранилище.Добавить(ДлительностьПроведенияНаПотоке);
	МассивРезультатовВХранилище.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Расчет потоков %1 выполнен за %2 сек. %3 перепроведено документов'"),Поток.КодПотока, ДлительностьПроведенияНаПотоке,Перепроведено));
	
	//Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//НСтр("ru = 'Расчет  %1 потока, выполнен за %2 сек, %3 Перепроведено документов '"),Поток.КодПотока , ДлительностьРасчетаПотока ,Перепроведено); 
	
	ПоместитьВоВременноеХранилище(МассивРезультатовВХранилище,Адрес);
	
	Возврат МассивРезультатовВХранилище;
КонецФункции

Функция ВыполнитьДлительноеМногопоточноеПерепроведение(Поток,Адрес) Экспорт
	Перем ОбщегоНазначения;
	Перем СтроковыеФункцииКлиентСервер;
	Перем ДлительныеОперации;
	ДлительностьМногопоточногоПроведенияНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ВыводитьПрогрессВыполнения = Поток.ВыводитьПрогрессВыполнения;
	Перепроведено = 0;
	Счетчик = 1;
	НомерПотока = Поток.КодПотока;	
	КоличествоДокументов = Поток.ТЗПотока.Количество();
	
	Для каждого эл ИЗ Поток.ТЗПотока  Цикл
		Процент = Цел(Счетчик / КоличествоДокументов * 100);
		Перепроведено = Перепроведено +1;
		Попытка	
			ДокОбъект = эл.Ссылка.ПолучитьОбъект();  
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		исключение 
			ОбщегоНазначения.СообщитьПользователю("Ошибка Документ " + ДокОбъект.Ссылка + " "  " ошибка обработки причина" +  ОписаниеОшибки()); 	
		КонецПопытки;
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2 выполнена на %3 процента'"),
		ТекущаяДатаСеанса(), НомерПотока, Процент));
		
		Если ВыводитьПрогрессВыполнения Тогда
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 документ %2'"), НомерПотока, ДокОбъект.Ссылка );
			ДлительныеОперации.СообщитьПрогресс(Процент, Сообщение);
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла; 	
	ДлительностьПроведенияНаПотоке = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДлительностьМногопоточногоПроведенияНачало)/1000;
	
	//ПоместитьВоВременноеХранилище(ДлительностьПроведенияНаПотоке,Адрес);	
	// результаты длительной операции в данном случае по конкретному потоку помещаем в хранилище
	МассивРезультатовВХранилище = Новый Массив;	
	МассивРезультатовВХранилище.Добавить(ДлительностьПроведенияНаПотоке);
	МассивРезультатовВХранилище.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Расчет потоков %1 выполнен за %2 сек. %3 перепроведено документов'"),Поток.КодПотока, ДлительностьПроведенияНаПотоке,Перепроведено));
	
	//Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//НСтр("ru = 'Расчет  %1 потока, выполнен за %2 сек, %3 Перепроведено документов '"),Поток.КодПотока , ДлительностьРасчетаПотока ,Перепроведено); 
	
	ПоместитьВоВременноеХранилище(МассивРезультатовВХранилище,Адрес);
	
	Возврат МассивРезультатовВХранилище;
КонецФункции


Функция ВыборДокументовПоВиду(ВидДокумента,НачалоПериодаДО,КонецПериодаДО) Экспорт
	//В т.ч по видам
	//МассивВыборкаДокументовПоВиду = Новый Массив; 
	//МассивВыборкаДокументовПоВиду.Очистить();
	//
	ТаблицаЗ = Новый ТаблицаЗначений(); 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	&ДокументНаименование КАК Документ
	|ГДЕ
	|	Документ.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И Документ.Проведен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ.Дата";
	
	ИмяДокумента =  ИмяДокументаПоВиду(ВидДокумента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументНаименование","Документ." + ИмяДокумента);
	Запрос.УстановитьПараметр("ДатаН",НачалоПериодаДО);
	Запрос.УстановитьПараметр("ДатаК",КонецДня(КонецПериодаДО));
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаЗ = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаЗ;
КонецФункции  

Функция ВыборДокументовПоВсемВидам(ВидыДокумента,НачалоПериодаДО,КонецПериодаДО) Экспорт
	ТаблицаЗ = Новый ТаблицаЗначений(); 
	ТЗИтоговая = Новый ТаблицаЗначений();  
	ТЗИтоговая.Колонки.Добавить("Ссылка");
	Если ТипЗнч(ВидыДокумента) = Тип("Массив") И ВидыДокумента.Количество()> 0 Тогда 	
		Для каждого ВидДокумента Из ВидыДокумента Цикл
			//МассивВыборкаДокументовПоВидам.Очистить();
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Документ.Ссылка КАК Ссылка
			|ИЗ
			|	&ДокументНаименование КАК Документ
			|ГДЕ
			|	Документ.Дата МЕЖДУ &ДатаН И &ДатаК
			|	И Документ.Проведен = ИСТИНА
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ.Дата";
			
			ИмяДокумента =  ИмяДокументаПоВиду(ВидДокумента);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументНаименование","Документ." + ИмяДокумента);
			Запрос.УстановитьПараметр("ДатаН",НачалоПериодаДО);
			Запрос.УстановитьПараметр("ДатаК",КонецДня(КонецПериодаДО));
			
			
			РезультатЗапроса = Запрос.Выполнить();	
			ТаблицаЗ = РезультатЗапроса.Выгрузить();
			
			Для каждого СтрокаИсточник Из ТаблицаЗ Цикл
				НоваяСтрока = ТЗИтоговая.Добавить();
				НоваяСтрока.Ссылка = СтрокаИсточник.Ссылка; 
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ТЗИтоговая;
КонецФункции  

Функция ИмяДокументаПоВиду(ВидДокумента)
	
	Перем СтроковыеФункцииКлиентСервер;
	ИмяДокумента = "";
	Массив = Новый Массив;
	Массив  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ВидДокумента);
	//Обойти массив и назначить словам заглавную букву
	Для каждого эл ИЗ Массив Цикл
		элЗагл = ТРег(эл);
		Если НЕ элЗагл = "И" Тогда
			ИмяДокумента = ИмяДокумента + элЗагл;
		КонецЕсли;
	КонецЦикла ;
	
	
	Возврат ИмяДокумента;
КонецФункции

#КонецОбласти 