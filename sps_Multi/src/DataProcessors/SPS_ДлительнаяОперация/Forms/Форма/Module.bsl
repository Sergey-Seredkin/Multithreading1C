///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
//Перем КоличествоПотоков; // порядковый номер длительной операции.

#КонецОбласти

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроцедуру(Команда)
	
	ПередВыполнением();
	
	ДлительнаяОперация = НачатьВыполнениеПроцедуры(НачалоПериодаДО,КонецПериодаДО,КоличествоПотоков);
	
	Контекст = Новый Структура("НомерОперации, ЭтоРасчетЗначения", КоличествоПотоков, Ложь);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФункцию(Команда)
	ВремяСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
 
	Времявыполнения = 0;
	КоличествоПотоков =0;
	ДлительностьОпераций = 0;
	МассивОписаниеТиповДок = Новый Массив;	
	Для каждого эл Из  Метаданные.ПолучитьЭлементы() Цикл
		Если эл.Выбрать = Истина Тогда	
			МассивОписаниеТиповДок.Добавить(эл.Документ);
		Конецесли;	
	КонецЦикла;	
	
	ПередВыполнением(); 
	ДлительнаяОперация = НачатьВыполнениеФункции(НачалоПериодаДО,КонецПериодаДО,КоличествоПотоков,МассивОписаниеТиповДок);
	
	Контекст = Новый Структура("КоличествоПотоков, ЭтоРаботаетФункция,Старт", КоличествоПотоков, Истина,ВремяСтарта);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания());
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцияМногопоточноеПерепроведениеПоВидам(Команда)
	ВремяСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Времявыполнения = 0;
	ДлительностьОпераций = 0;
	МассивОписаниеТиповДок = Новый Массив;	
	Для каждого эл Из  Метаданные.ПолучитьЭлементы() Цикл
		Если эл.Выбрать = Истина Тогда	
			МассивОписаниеТиповДок.Добавить(эл.Документ);
		Конецесли;	
	КонецЦикла;	
	
	ПередВыполнением(); 
	
	ДлительнаяОперация = НачатьВыполнениеМногопоточнойФункцииПоВидам(НачалоПериодаДО,КонецПериодаДО,КоличествоПотоков,ПрогрессВыполнения,МассивОписаниеТиповДок);
	Контекст = Новый Структура("КоличествоПотоков, ЭтоРаботаетФункция,Старт", КоличествоПотоков, Истина,,ВремяСтарта);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания());
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцияМногопоточноеПерепроведение(Команда)
	ВремяСтарта = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Времявыполнения = 0;
	ДлительностьОпераций = 0;
	МассивОписаниеТиповДок = Новый Массив;	
	Для каждого эл Из  Метаданные.ПолучитьЭлементы() Цикл
		Если эл.Выбрать = Истина Тогда	
			МассивОписаниеТиповДок.Добавить(эл.Документ);
		Конецесли;	
	КонецЦикла;	
	
	ПередВыполнением(); 
	
	ДлительнаяОперация = НачатьВыполнениеМногопоточнойФункции(НачалоПериодаДО,КонецПериодаДО,КоличествоПотоков,ПрогрессВыполнения,МассивОписаниеТиповДок);
	Контекст = Новый Структура("КоличествоПотоков, ЭтоРаботаетФункция,Старт", КоличествоПотоков, Истина,ВремяСтарта);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультат", ЭтотОбъект, Контекст);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания());
		
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередВыполнением()
	
	ОчиститьСообщения();
	
	Если ФормаОжидания = "Показывать" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомление;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
		ТекстУведомления = НСтр("ru = 'Пожалуйста, подождите...'");
		Если Не ПустаяСтрока(Уведомление) Тогда
			ТекстУведомления = Уведомление + Символы.ПС + ТекстУведомления;
		КонецЕсли;
		Элементы.ДлительнаяОперация.РасширеннаяПодсказка.Заголовок = ТекстУведомления;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1 Начало выполнения, потоков %2...'"),
	ОбщегоНазначенияКлиент.ДатаСеанса(),
	КоличествоПотоков);
	Сообщение.Сообщить();
	
КонецПроцедуры 

&НаСервере
Функция НачатьВыполнениеФункции(НачалоПериодаДО,КонецПериодаДО,КоличествоПотоков,МассивОписаниеТиповДок)
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
	"Обработки.SPS_ДлительнаяОперация.ВыполнитьДлительноеОднопоточноеПерепроведение", ОжидаемыйРезультат = "Ошибка", ПрогрессВыполнения,
	КоличествоПотоков,НачалоПериодаДО,КонецПериодаДО,МассивОписаниеТиповДок);
	
КонецФункции

&НаСервере
Функция НачатьВыполнениеМногопоточнойФункцииПоВидам(ДатаН,ДатаК,КоличествоПотоков,ПрогрессВыполнения,МассивОписаниеТиповДок)
	//"здесь процедура общего модуля будет выполняться в ввиде фонового задания разделенного на потоки"
	
	ДлительностьРасчетаНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НомерПотока = 1;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение многопоточной функции'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;	
	
	ЧислоОбъектовВМассиве      = МассивОписаниеТиповДок.Количество();
	ВсегоПотоков            = КоличествоПотоков;
	//РазмерПорции            = Цел(ЧислоСтрокВТаблице/ВсегоПотоков);
	НачальныйИндексПорции   = 0;
	//КонечныйИндексПорции    = РазмерПорции - 1;	
	МассивЗаданий 		= Новый Массив;
	МассивАдресовВХранилище = Новый Массив;
	ЭтоПоследнийПоток       = Ложь;
	ПараметрыМетода 	= Новый Соответствие; 
	
	ОбъектовНаПоток = 0;
	Если КоличествоПотоков <= ЧислоОбъектовВМассиве Тогда 
		ОбъектовНаПоток = Цел(ЧислоОбъектовВМассиве/КоличествоПотоков);
		Остаток = ЧислоОбъектовВМассиве-ОбъектовНаПоток*КоличествоПотоков; 
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1'"),"Задайте число потоков меньше или равное количеству объектов для обработки!");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Пока НомерПотока <=  КоличествоПотоков Цикл 
		
		ТЗПотока = Новый ТаблицаЗначений;
		ТЗПотока.Колонки.Добавить("Ссылка");
		
		МассивПотока = ПолучитьТЗДокументовПотокаДляМногопоточнойОперацииПоВидам(КоличествоПотоков,НомерПотока,ОбъектовНаПоток,Остаток,ДатаН,ДатаК,МассивОписаниеТиповДок);
		Для каждого эл ИЗ МассивПотока Цикл
			НоваяСтрока = ТЗПотока.Добавить();
			НоваяСтрока.Ссылка = эл.Ссылка; 
		КонецЦикла;
		
		Если НомерПотока = ВсегоПотоков Тогда
			ЭтоПоследнийПоток    = Истина;
			КонечныйИндексПорции = ЧислоОбъектовВМассиве - 1; 	
		КонецЕсли; 
		
		ДлительностьПодготовкиДокументов = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ДлительностьПодбора = (ДлительностьПодготовкиДокументов - ДлительностьРасчетаНачало)/1000; 
		
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено);
		МассивАдресовВХранилище.Добавить(АдресВХранилище);
		КодПотока = "Поток" + НомерПотока;
		ПараметрыПотока = Новый Структура;
		ПараметрыПотока.Вставить("ТЗПотока", ТЗПотока);  
		ПараметрыПотока.Вставить("КодПотока", "Поток № " + НомерПотока);
		ПараметрыПотока.Вставить("ВсегоПотоков", ВсегоПотоков);
		ПараметрыПотока.Вставить("ВыводитьПрогрессВыполнения", ПрогрессВыполнения);
		
		ПараметрыПотокаМассив = Новый Массив;
		ПараметрыПотокаМассив.Добавить(ПараметрыПотока);
		ПараметрыПотокаМассив.Добавить(АдресВХранилище);	
		
		ПараметрыМетода.Вставить(КодПотока, ПараметрыПотокаМассив);	
		
		Если ЭтоПоследнийПоток Тогда
			Прервать; 
		КонецЕсли;
		
		//	//НачальныйИндексПорции = НачальныйИндексПорции + РазмерПорции;
		//	//КонечныйИндексПорции  = КонечныйИндексПорции  + РазмерПорции ;	
		//	
		номерПотока = номерПотока + 1;	   	
	КонецЦикла; 
	
	Возврат	 ДлительныеОперации.ВыполнитьФункциюВНесколькоПотоков(
	"Обработки.SPS_ДлительнаяОперация.ВыполнитьДлительноеМногопоточноеПерепроведениеПоВидам", 
	ПараметрыВыполнения, 
	ПараметрыМетода);
КонецФункции

&НаСервере
Функция НачатьВыполнениеМногопоточнойФункции(ДатаН,ДатаК,КоличествоПотоков,ПрогрессВыполнения,МассивОписаниеТиповДок)
	
	ДлительностьРасчетаНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	НомерПотока = 1;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выполнение многопоточной функции'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;	
	
	ТЗВсехДокументов = ПолучитьТЗДокументовПотокаДляМногопоточнойОперации(ДатаН,ДатаК,МассивОписаниеТиповДок);
	
	ЧислоОбъектовВМассиве   = ТЗВсехДокументов.Количество();
	ВсегоПотоков            = КоличествоПотоков;
	РазмерПорции            = Цел(ЧислоОбъектовВМассиве/ВсегоПотоков);
	НачальныйИндексПорции   = 0;
	КонечныйИндексПорции    = РазмерПорции - 1;	
	МассивЗаданий 		= Новый Массив;
	МассивАдресовВХранилище = Новый Массив;
	ЭтоПоследнийПоток       = Ложь;
	ПараметрыМетода 	= Новый Соответствие; 
	
	Пока НомерПотока <=  КоличествоПотоков Цикл 
		ТЗПотока = Новый ТаблицаЗначений;
		ТЗПотока = ТЗВсехДокументов.СкопироватьКолонки();
		
		Если НомерПотока = ВсегоПотоков Тогда
			ЭтоПоследнийПоток    = Истина;
			КонечныйИндексПорции = ЧислоОбъектовВМассиве - 1; 	
		КонецЕсли; 
		
		Для Инд = НачальныйИндексПорции По КонечныйИндексПорции Цикл
			ЗаполнитьЗначенияСвойств(ТЗПотока.Добавить(), ТЗВсехДокументов[Инд]);
		КонецЦикла; 
		
		ДлительностьПодготовкиДокументов = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ДлительностьПодбора = (ДлительностьПодготовкиДокументов - ДлительностьРасчетаНачало)/1000; 
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено);
		МассивАдресовВХранилище.Добавить(АдресВХранилище);
		КодПотока = "Поток" + НомерПотока;
		
		ПараметрыПотока = Новый Структура;
		ПараметрыПотока.Вставить("ТЗПотока", ТЗПотока);  
		ПараметрыПотока.Вставить("КодПотока", "Поток № " + НомерПотока);
		ПараметрыПотока.Вставить("ВсегоПотоков", ВсегоПотоков);
		ПараметрыПотока.Вставить("ВыводитьПрогрессВыполнения", ПрогрессВыполнения);
		
		ПараметрыПотокаМассив = Новый Массив;
		ПараметрыПотокаМассив.Добавить(ПараметрыПотока);
		ПараметрыПотокаМассив.Добавить(АдресВХранилище);	
		
		ПараметрыМетода.Вставить(КодПотока, ПараметрыПотокаМассив);	
		
		Если ЭтоПоследнийПоток Тогда
			Прервать; 
		КонецЕсли;
		
		НачальныйИндексПорции = НачальныйИндексПорции + РазмерПорции;
		КонечныйИндексПорции  = КонечныйИндексПорции  + РазмерПорции ;	
		
		номерПотока = номерПотока + 1;	   			
	КонецЦикла;
	
	
	Возврат	 ДлительныеОперации.ВыполнитьФункциюВНесколькоПотоков(
	"Обработки.SPS_ДлительнаяОперация.ВыполнитьДлительноеМногопоточноеПерепроведение", 
	ПараметрыВыполнения, 
	ПараметрыМетода);
	
	
КонецФункции

&НаСервере
Функция НачатьВыполнениеПроцедуры(НачалоПериодаДО,КонецПериодаДО,КоличествоПотоков)
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(,
	"Обработки.SPS_ДлительнаяОперация.ВыполнитьРасчет",
	КоличествоПотоков,НачалоПериодаДО,КонецПериодаДО, ОжидаемыйРезультат = "Ошибка", ПрогрессВыполнения);
	
КонецФункции

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  Контекст - Структура:
//   * НомерОперации - Число
//   * ЭтоРасчетЗначения - Булево
//
&НаКлиенте
Процедура ОбработатьРезультат(Результат, Контекст) Экспорт
	
	ВремяВыполнения =  (ТекущаяУниверсальнаяДатаВМиллисекундах() - Контекст.Старт)/1000 ;
 
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомление;
	Если Результат = Неопределено Тогда // Отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(
		Результат.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Результаты  = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если КоличествоПотоков > 1 Тогда
		ОбщееВремяПоПотокам = 0;       
		
		МассивСообщенийРезультатовПоПотокам = Новый Массив;
		
		//РезультатСоответствие = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);	
		
		Для каждого эл ИЗ  Результаты Цикл
			
			Для каждого эл2 Из  эл.Значение Цикл
				Если  эл2.Ключ = "АдресРезультата" Тогда
					Данные = ПолучитьИзВременногоХранилища(эл2.Значение);
					ОбщееВремяПоПотокам = ОбщееВремяПоПотокам + Данные[0];
					МассивСообщенийРезультатовПоПотокам.Добавить(Данные[1]);
				КонецЕсли; 	
				
			КонецЦикла;	
		КонецЦикла;		
		//ВремяВыполнения = ОбщееВремяПоПотокам;
	Иначе 
		//ВремяВыполнения = Результаты[0];	
	Конецесли;
	
	
	ВывестиРезультат(Результат, Контекст.КоличествоПотоков,
	Контекст.ЭтоРаботаетФункция,МассивСообщенийРезультатовПоПотокам,КоличествоПотоков);
	
КонецПроцедуры 

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовоеСостояниеДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ВыполнитьДействиеПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстУведомления = НСтр("ru = 'Пожалуйста, подождите...'");
	Если Не ПустаяСтрока(Уведомление) Тогда
		ТекстУведомления = Уведомление + Символы.ПС + ТекстУведомления;
	КонецЕсли;
	Если Результат.Прогресс <> Неопределено Тогда
		ТекстУведомления = ТекстУведомления + ПрогрессСтрокой(Результат.Прогресс);
		Элементы.ДлительнаяОперация.РасширеннаяПодсказка.Заголовок = ТекстУведомления;
	КонецЕсли;
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого СообщениеПользователю Из Результат.Сообщения Цикл
			СообщениеПользователю.ИдентификаторНазначения = УникальныйИдентификатор;
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиРезультат(Результат, НомерПотока, ЭтоРасчетЗначения,
	МассивСообщенийРезультатовПоПотокам,КоличествоПотоков)
	
	Если ЭтоРасчетЗначения Тогда 
		ТекстСообщения = Неопределено;
	КонецЕсли;
	
	Если Результат.Свойство("АдресРезультата") И ЗначениеЗаполнено(Результат.АдресРезультата) Тогда
		Если ТипЗнч(ПолучитьИзВременногоХранилища(Результат.АдресРезультата)[0]) = Тип("Число") Тогда
			ТекстСообщения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата)[1];
		Иначе		 
			ТекстСообщения = "Успешно";	
		КонецЕсли;
		
		Если ТекстСообщения = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Из временного хранилища не получен результат (получено Неопределено)'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Действие %1 успешно выполнено'"), НомерПотока);
	КонецЕсли;
	
	//Если Результат.Сообщения <> Неопределено Тогда
	//	Для Каждого СообщениеПользователю Из Результат.Сообщения Цикл
	//		СообщениеПользователю.ИдентификаторНазначения = УникальныйИдентификатор;
	//		СообщениеПользователю.Сообщить();
	//	КонецЦикла;
	//КонецЕсли;
	
	Если  КоличествоПотоков > 1 И (НЕ МассивСообщенийРезультатовПоПотокам = неопределено) Тогда
		Для каждого эл Из МассивСообщенийРезультатовПоПотокам Цикл	
			ТекстСообщения = эл;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка по всем потокам завершена %1 %2'"), ТекущаяДатаСеанса(), ТекстСообщения);
			Сообщение.Сообщить();
		КонецЦикла;	
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обработка завершена %1 %2'"), ТекущаяДатаСеанса(), ТекстСообщения);
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПрогрессСтрокой(Прогресс)
	
	Результат = "";
	Если Прогресс = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Процент = 0;
	Если Прогресс.Свойство("Процент", Процент) Тогда
		Результат = Строка(Процент) + "%";
	КонецЕсли;
	Текст = 0;
	Если Прогресс.Свойство("Текст", Текст) Тогда
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + " (" + Текст + ")";
		Иначе
			Результат = Текст;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОжидания()
	
	Перем ОповещениеОПрогрессеВыполнения, ПараметрыОжидания;
	
	Если (ПрогрессВыполнения Или ВыводитьСообщения) И (ФормаОжидания <> "Показывать") Тогда
		ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ВыполнитьДействиеПрогрессВыполнения", ЭтотОбъект);
	Иначе
		ОповещениеОПрогрессеВыполнения = Неопределено;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = Уведомление;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = ПрогрессВыполнения;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.НавигационнаяСсылка = "e1cib/app/Обработка.SPS_ДлительнаяОперация";
	ПараметрыОжидания.ВыводитьОкноОжидания = (ФормаОжидания = "Показывать");
	ПараметрыОжидания.ВыводитьСообщения = ВыводитьСообщения;
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	КоличествоПотоков = 0;
	ОжидаемыйРезультат = "Успешно";
	ФормаОжидания = "Показывать";
	ПрогрессВыполнения = Истина;
	НачалоПериодаДО  = '20250201';
	КонецПериодаДО = КонецДня('20250228235959');
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ОжидаемыйРезультат.ВысотаЗаголовка = 2;
		Элементы.СкоростьВыполнения.ВысотаЗаголовка = 2;
		Элементы.ФормаОжидания.ВысотаЗаголовка = 2;
	КонецЕсли;
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Элементы.ПредупреждениеНадпись.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.ПредупреждениеНадпись.Заголовок, "РежимОтладки");
		Элементы.ГруппаПредупреждение.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьТЗДокументовПотокаДляМногопоточнойОперацииПоВидам(КоличествоПотоков,НомерПотока,ОбъектовНаПоток,
	Остаток,ДатаН,ДатаК,МассивОписаниеТиповДок)
	МассивВидовДокументовПотока = Новый Массив;
	
	Если НомерПотока < КоличествоПотоков Тогда	
		КОбработке = НомерПотока*ОбъектовНаПоток;
	ИначеЕсли 	НомерПотока = КоличествоПотоков Тогда
		КОбработке = (НомерПотока*ОбъектовНаПоток) + Остаток;	
	КонецЕсли;	
	
	i= НомерПотока;
	
	Пока i <= КОбработке Цикл                                            
		
		МассивВидовДокументовПотока.Добавить(МассивОписаниеТиповДок[i-1]);			
		i=i+1;	
	КонецЦикла;	
	МассивДокументовОдногоВидаДокументовПотока = Новый Массив;
	МассивДокументовГруппыВидаДокументовПотока = Новый Массив; 
	
	Для каждого эл ИЗ МассивВидовДокументовПотока Цикл		
		МассивОдногоВидаДокументовПотока = Обработки.SPS_ДлительнаяОперация.ВыборДокументовПоВиду(эл,ДатаН,ДатаК); 	
		
		Если МассивОдногоВидаДокументовПотока.Количество() > 0 Тогда				
			Для каждого эл ИЗ МассивОдногоВидаДокументовПотока Цикл 
				МассивДокументовГруппыВидаДокументовПотока.Добавить(эл);	
			КонецЦикла;	
		Конецесли;	
		
	КонецЦикла;	
	
	возврат МассивДокументовГруппыВидаДокументовПотока;         
	
	
Конецфункции

Функция ПолучитьТЗДокументовПотокаДляМногопоточнойОперации(ДатаН,ДатаК,МассивОписаниеТиповДок)
	МассивВидовДокументовПотока = Новый Массив;
	
	МассивДокументовПотока = Новый Массив;
	
	МассивДокументовПотока = Обработки.SPS_ДлительнаяОперация.ВыборДокументовПоВсемВидам(МассивОписаниеТиповДок,ДатаН,ДатаК); 	
	
	
	возврат МассивДокументовПотока;         
	
	
Конецфункции

&НаКлиенте
Процедура МетаданныеВыбратьПриИзменении(Элемент,ТекущаяСтрока)
	
	доков = 0;
	Для каждого стр Из  Метаданные.ПолучитьЭлементы() Цикл 
		Если  стр.Выбрать = Истина Тогда 
			доков = доков +1 ; 
		КонецЕсли;
	КонецЦикла;	
	Если доков <> 0 Тогда
		КоличествоПотоков = доков;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти 


